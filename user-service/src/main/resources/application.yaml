spring:
  application:
    name: user-service
  security:
    oauth2:
      client:
        registration:
          yandex:
            client-id: ${YANDEX_CLIENT_ID}
            client-secret: ${YANDEX_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope: login:email, login:info
            client-name: Yandex
        provider:
          yandex:
            authorization-uri: https://oauth.yandex.ru/authorize
            token-uri: https://oauth.yandex.ru/token
            user-info-uri: https://login.yandex.ru/info
            user-name-attribute: login
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8081/api/auth/.well-known/jwks.json
  datasource:
    url: jdbc:postgresql://localhost:5432/${USER_DATABASE_NAME:user-db}
    username: ${USER_DATABASE_USER:user-admin}
    password: ${USER_DATABASE_PASSWORD:user-password}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create
  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD:paZnybeyXR9Fx4ah}
  cache:
    type: redis
  config:
    import: optional:file:../../../docker/.env[.properties] # TODO: import data from .env file

user-service:
  jwt:
    access-token:
      expiry: 30m
    refresh-token:
      expiry: 15d
    private-key-path: keys/private_pkcs8.pem
    public-key-path: keys/public.pem

logging:
  level:
    org.springframework.security: trace

server:
  port: 8081